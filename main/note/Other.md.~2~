# git

Posted on December 29, 2024

## SSL_ERROR_SYSCALL

在提交分支时报出了`OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 0`的错误。

根据 *正宗咸豆花 at CSDN* 的方案，可以使用SSH绕过HTTPS的OpenSSL延迟，在实际使用中，`git remote set-url origin git@github.com:username/repo.git`，就像这样。

另外的，附上当时的最小实例：

```bash
git clone --depth=1 git@github.com:username/repo.git
cd repo
// git remote add origin git@github.com:username/repo.git
// git push origin master
git add .
git commit -m "last commit"
git push origin master ## git push -u origin master（设置上游仓库）
```

## remote && rsync

对于凭证登陆，选择 `cache` 则有 `git config --global credential.credentialStore cache`。（`dotnet tool install -g git-credential-manager`）

同步：`cp -rp book/* repo` or `rsync -a ./book/* repo` 。（`! [rejected]        master -> master (non-fast-forward)` 时，可用`git push -f`）

## CNAME file

`gh-page`需要一`CNAME file`以重定向，其内容为定向到的域名。

# Tools/Haskell & Rust

## Pandoc

Pandoc转化`.md`到`html`后序列化残留的问题，可以使用`pandoc -f html URL -t commonmark-raw_html -o name.md`的方法解决，对于代码块标记导出后被覆盖的问题，可用`find -type f -name "*.md" | xargs sed 's#sourceCode#bash#g' -i`替换。

## Reader

下载一DjVu文档后，使用emacs的nov插件无法查看其内容，查看配置注释发现nov是一个 `.epub` 查看器，遂安装djvu，但仍无法查看内容，查询ArchWiki后断定是缺少依赖。安装依赖后仍不显示内容但各命令工作正常，推测是由于djvu插件缺省不显示图片所致，`(setq djvu-image-mode t)` 后正常显示。

``` elisp
(use-package djvu)
```

``` bash
sudo pacman -S djvulibre
```

### to PDF

``` bash
sudo pacman -S libtiff
```

``` bash
ddjvu -format=tiff name(1).djvu name(2).tiff
tiff2pdf -j -o name(3).pdf name(2).tiff
```

## Writer

### Typst

``` bash
typst watch --features html
## or
TYPST_FEATURES=html
```

#### on VSC

```  bash
sudo pacman -S code && ext install myriad-dreamin.tinymist
```

#### on Emacs

```  bash
git clone --depth 1 https://git.sr.ht/~mafty/tip-server-py
cd tip-server-py
pip install -r requirements.txt
```

```  bash
cargo install font-manager
```

github:[e-ricus/font-manager-cli](https://github.com/e-ricus/font-manager-cli).

```  bash
cargo install --git https://github.com/typst/typst.git --locked typst-cli
```

```  bash
cargo install --git https://github.com/Myriad-Dreamin/tinymist --locked tinymist
```

```  bash
git clone --depth 1 https://github.com/uben0/tree-sitter-typst
cd tree-sitter-typst/src

cc -fPIC -std=c99 -c parser.c
cc -fPIC -std=c99 -c scanner.c
cc -shared parser.o scanner.o -o libtree-sitter-typst.so

# to emacs
mkdir tree-sitter
cd tree-sitter
mv libtree-sitter-typst ./
```

##### Config

``` elisp
(use-package websocket
  :ensure t)

(use-package lsp-mode
  :ensure t)

(use-package typst-ts-mode
  :vc (:url "https://codeberg.org/meow_king/typst-ts-mode" :branch "develop")
  :custom
  ;; don't add "--open" if you'd like `watch` to be an error detector
  ;; (typst-ts-watch-options "--open")

  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
  (typst-ts-mode-enable-raw-blocks-highlight t)
  :config
  (keymap-set typst-ts-mode-map "C-c C-c" #'typst-ts-tmenu)
  ;; make sure to install typst-lsp from
  ;; https://github.com/nvarner/typst-lsp/releases
  ;; or use tinymist
  (add-to-list 'lsp-language-id-configuration '(typst-ts-mode . "typst"))
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection "tinymist")
    :major-modes '(typst-ts-mode)
    :server-id 'tinymist)))

(use-package tip
  :vc (:url "https://git.sr.ht/~mafty/tip"))
```

### LaTeX

``` bash
sudo pacman -S perl-tk ## Option
cd /tmp
wget2 https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2025-20250308.iso
sudo mkdir /mnt/iso
sudo mount texlive2025-20250308.iso /mnt/iso/
sudo perl ./install-tl --gui ## Advanced => checkmake Create symlinks in standard directory.

## Post install

sudo tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet
sudo tlmgr update --all # sudo tlmgr update --self --all
```

#### Global TeX Font

``` bash
sudo cp /usr/local/texlive/[version]/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-[context].conf
sudo fc-cache -fv
```

#### Maxima

`maxima`内有`tex`函数，可将在其内部的表达式转化为合法的LaTeX形式给出。

``` bash
tex(sqrt(2)-sqrt(3))
```

## Artem

``` bash
cargo install artem
```

# DotFile

## Shell

### ImageView

``` bash
cargo install viu
## viu $PATH/$NAME
```

### fish

```bash
cargo install --git https://github.com/fish-shell/fish-shell --locked
```

#### fisher

```bash
git clone --depth=1 https://github.com/jorgebucaran/fisher.git && cd fisher/functions
```

``` fish
source
fisher install ../
fisher install IlanCosman/tide@v6
```

### zsh

`pacman -S zsh zsh-completions`
`cargo install starship`

#### `.zshrc`:PackageManager and p10k/starship

``` zsh
git clone --depth=1 https://github.com/zdharma-continuum/zinit ~/.local/share/zinit/zinit.git
zsh ~/.local/share/zinit/zinit.git/scripts/install.sh
source ~/.zshrc
```


``` zsh
zinit snippet OMZ::*

zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-history-substring-search
zinit light zdharma-continuum/fast-syntax-highlighting

eval "$(starship init zsh)"


plugins=(git
        zsh-syntax-highlighting
        zsh-autosuggestions
        zsh-completions)

ZSH_THEME="powerlevel10k/powerlevel10k"

#:wq

zinit ice depth"1" # git clone depth
zinit light romkatv/powerlevel10k
```

## Terminal

[hotkey](https://sw.kovidgoyal.net/kitty/overview/#overview)

`sudo pacman -S kitty`

### Kitty

``` bash
git clone --depth 1 https://github.com/dexpota/kitty-themes ~/.config/kitty/kitty-themes/

#vi => ~/.config/kitty/kitty.conf

# BEGIN_KITTY_THEME
# Spacemacs
include current-theme.conf
# END_KITTY_THEME
font_family      FiraCode

symbol_map U+4E00-U+9FA5 LxgwWenKai

#:wq

kitty +kitten themes --dump-theme 
## xor
cd ~/.config/kitty
ln -s ./kitty-themes/themes/[name].conf ~/.config/kitty/theme.conf

# cat ~/.config/kitty/kitty.conf
# ...
# include ./theme.conf
# ...

```
### Fetch

`cargo install --git "https://github.com/kamui-fin/rfetch" --features=battery`

#### Config

``` toml
# cat .config/rfetch/config.toml

modules = ["user_host", "shell", "distro", "packages", "uptime", "memory", "kernel", "ip", "cpu", "disk_usage", "process_num", "arch", "temp", "locale", "device_name", "time", "date", "battery"]
delimiter = "~>"
title_color = "pink"

[user_host]
line = true
line_symbol = "━"
line_color = "magenta"

[colors]
enabled = true
show_bg_colors = false

[ip]
public = true
```

## PackageManager

### aura

``` bash
## aura check

sudo pacman -S pacman-contrib graphviz
pip install shellcheck-py

## install

cargo install aura

## Deps Graph

aura deps [package-name] --open

# cat ~/.config/mimeapps.list => image/png=emacs.desktop

```

### Reflector

``` bash
sudo pacman -S reflector
sudo systemctl [enable/start] reflector.[timer/service]

sudo vim /etc/xdg/reflector/reflector.conf 
# -- --country France,Germany
# -- --protocol https
# ...
# ++ --country China
# ++ --protocol rsync

sudo vim /etc/pacman.conf
# -- #NoExtract   =
# ++ NoExtract   = true

```

## Fonts

Global TeX Font and `git clone --depth=1 https://github.com/ryanoasis/nerd-fonts ~/.local/share/fonts/`.

## LinuxTools

### OOM

``` bash
sudo pacman -S earlyoom
sudo systemctl enable --now earlyoom
```

### TrashFileCheck

``` bash
cargo install cargo install czkawka_[gui/cli]
```
